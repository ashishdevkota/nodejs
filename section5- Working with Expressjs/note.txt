*************EXPRESS JS*******
framework for nodejs appl


***3. Installing Express.js***
npm install --save express

import:
const express=require('express');
const app=express(); //create app obj

*****4. Adding Middleware***
app.use((req,res,next)=>{  
    console.log('middleware');
    next();
});//adding middleware function
here use next function to reach next middleware another app.use function
next play crutil role

//import http functionality
const http=require('http');

const express=require('express');
const app=express();//create app obj

app.use((req,res,next)=>{  
    console.log('middleware');
    next();
});//adding middleware function

app.use((req,res,next)=>{
    console.log('in another middleware');
    res.send('hello');
});


const server=http.createServer(app);
server.listen(3000);//listen port 3000



********6. Express.js - Looking Behind the Scenes*******8
####using express js to write clean code#####

const express=require('express');
const app=express();//create app obj

app.use((req,res,next)=>{  
    console.log('middleware');
    next();//allows the request to continue tothe next middleware in line
});//adding middleware function

app.use((req,res,next)=>{
    console.log('in another middleware');
    res.send('hello');
});

app.listen(3000);//listen port 3000



********Handling Different Routes*******

const express=require('express');
const app=express();//create app obj

app.use('/',(req,res,next)=>{
    console.log("this always runs!");
    next();
})

app.use('/add-product',(req,res,next)=>{
    console.log('in another middleware');
    res.send('The add product "page" ');
});


app.use('/',(req,res,next)=>{
    console.log('in another middleware');
    res.send('hello');
});

app.listen(3000);//listen port 3000




*******9. Parsing Incoming Requests******
to register parser
install  npm install --save body-parser

const bodyParser=require('body-parser');

app.use(bodyParser.urlencoded({extended:false}));//register parser


####code##3

const express=require('express');
const bodyParser=require('body-parser');

const app=express();//create app obj

app.use(bodyParser.urlencoded({extended: false}));//register parser


app.use('/add-product',(req,res,next)=>{
    res.send('<form action="/product" method="POST"><input type="text" name="title"><button type="submit">Add Product</button></form>');
});

app.use('/product',(req,res,next)=>{
    console.log(req.body);
   res.redirect('/');//helps to redirect 
});

app.use('/',(req,res,next)=>{
    res.send('<h1>Hellow from Express!</h1>');
});

app.listen(3000);//listen port 3000


**********Limiting Middleware Execution to POST Requests***************8
filter get  request
to skip middleware for get register use POST

app.post('/product',(req,res,next)=>{
    console.log(req.body);
   res.redirect('/');//helps to redirect 
});

==> this will triger when only incoming poat request

code:

const express=require('express');
const bodyParser=require('body-parser');

const app=express();//create app obj

app.use(bodyParser.urlencoded({extended: false}));//register parser


app.use('/add-product',(req,res,next)=>{
    res.send('<form action="/product" method="POST"><input type="text" name="title"><button type="submit">Add Product</button></form>');
});

app.post('/product',(req,res,next)=>{
    console.log(req.body);
   res.redirect('/');//helps to redirect 
});

app.use('/',(req,res,next)=>{
    res.send('<h1>Hellow from Express!</h1>');
});

app.listen(3000);//listen port 3000



**************Using Express Router******
create new folder routes then create
admin.js and shop.js files

admin.js contenT:
const express=require('express');

const router=express.Router();

router.get('/add-product',(req,res,next)=>{
    res.send('<form action="/product" method="POST"><input type="text" name="title"><button type="submit">Add Product</button></form>');
});

router.post('/product',(req,res,next)=>{
    console.log(req.body);
    console.log('from product')
   res.redirect('/');//helps to redirect 
});

module.exports=router;



shop.js content:
const express=require('express');

const router=express.Router();//creating router obj

router.get('/',(req,res,next)=>{
    res.send('<h1>Hellow from Express!</h1>');
});

module.exports=router;


app.js content after importing:

const express=require('express');

const adminRoutes=require('./routes/admin');
const shopRoutes=require('./routes/shop');

const bodyParser=require('body-parser');

const app=express();//create app obj

app.use(bodyParser.urlencoded({extended: false}));//register parser

app.use(adminRoutes);
app.use(shopRoutes);

app.listen(3000);//listen port 3000


**********Adding a 404 Error Page************************

on app.js file add code for 4040 error:
app.use((req,res,next)=>{
    res.status(404).send('<h1>PAge not found</h1>');
});



****************Filtering Paths******************

when have common start  starting Paths use same segment then
take that segment out then add on app.js for filter

app.use('/admin',adminRoutes);





********Creating HTML Pages*********
create new folder views 
add add-product.html and shop.html file
(MVC)



*****Serving HTML Pages******

on shop.js : add 
const path=require('path')// import path module code node js module
 
router.get('/',(req,res,next)=>{
   res.sendFile(path.join(__dirname,'../','views','shop.html'));  //using path module to navigate to shop.html
});


on admin.js:
const path=require('path')// import path module code node js module
 

 // /admin/add-product => GET
router.get('/add-product',(req,res,next)=>{
    res.sendFile(path.join(__dirname,'../','views','add-product.html'));
});



********Returning a 404 Page*****

on default app.js file

app.use((req,res,next)=>{
   res.status(404).sendFile(path.join(__dirname,'views','404.html'));
});// register 404 error page



******Using a Helper Function for Navigation****

create now folder util and create path.js file inside  (const new clean way to creath path to root)
content:
const path=require('path');
module.exports=path.dirname(process.mainModule.filename);



on admin.js import path;
const  rootDir=require('../util/path');

change made after(delete ___dirname and ../):
// /admin/add-product => GET
router.get('/add-product',(req,res,next)=>{
    res.sendFile(path.join(rootDir,'views','add-product.html'));
});
 alson on shop.js file


********Styling our Pages******
use style tag to style html file



********Serving Files Statically******
exception for serving external css file
create new folder public
create css folder inside with
main.css and product css file
add style and 
 <link rel="stylesheet" href="/css/main.css">
 <link rel="stylesheet" href="/css/product.css">


register middle ware  path on app.js:
app.use(express.static(path.join(__dirname,'public')));// register middilware  //to directly  serve file statically


***** final files*****
app.js:
const path=require('path'); //path module reg

const express=require('express');

const adminRoutes=require('./routes/admin');
const shopRoutes=require('./routes/shop');

const bodyParser=require('body-parser');

const app=express();//create app obj

app.use(bodyParser.urlencoded({extended: false}));//register parser
app.use(express.static(path.join(__dirname,'public')));// register middilware  //to directly  serve file statically

app.use('/admin',adminRoutes);
app.use(shopRoutes);

app.use((req,res,next)=>{
   res.status(404).sendFile(path.join(__dirname,'views','404.html'));
});// register 404 error page

app.listen(3000);//listen port 3000









admin.js:
const path=require('path')// import path module code node js module
 
const express=require('express');

const  rootDir=require('../util/path');

const router=express.Router();

// /admin/add-product => GET
router.get('/add-product',(req,res,next)=>{
    res.sendFile(path.join(rootDir,'views','add-product.html'));
});

// /admin/add-product => POST
router.post('/add-product',(req,res,next)=>{
    console.log(req.body);
    console.log('from product')
   res.redirect('/');//helps to redirect 
});
 
module.exports=router;






shop.js:
const path=require('path') //using path module

const express=require('express');

const  rootDir=require('../util/path');

const router=express.Router();//creating router obj

router.get('/',(req,res,next)=>{
   res.sendFile(path.join(rootDir,'views','shop.html'));
});

module.exports=router;



